[external definitions]

translation unit
================
    int i;
    int j;
~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (i)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (j)
            ]
    ]
~~~~~~~~~~~~~~~~

external declaration
====================
    int i;
    void f() {}
~~~~~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (i)
            ]
        function-def
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decl declarator
                :indtype function
                    :params []
                :name (f)
            :body block
                :entities []
    ]
~~~~~~~~~~~~~~~~~~~~


[function definitions]

w/o parameters
==============
    int main() {}
~~~~~~~~~~~~~~
transl-unit
    :entities [
        function-def
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decl declarator
                :indtype function
                    :params []
                :name (main)
            :body block
                :entities []
    ]
~~~~~~~~~~~~~~

parameters w/o names
====================
    int main(int, char **) {}
~~~~~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        function-def
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decl declarator
                :indtype function
                    :params [
                        parameter
                            :specs specifiers
                                :dirtype id-type
                                    :names [(int)]
                        parameter
                            :specs specifiers
                                :dirtype id-type
                                    :names [(char)]
                            :decl declarator
                                :indtype pointer
                                    :specs specifiers
                                    :indtype pointer
                                        :specs specifiers
                    ]
                :name (main)
            :body block
                :entities []
    ]
~~~~~~~~~~~~~~~~~~~~

declaration list
================
    int main(argc, argv) char **argv; int argc; int; {}
~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        function-def
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decl declarator
                :indtype function
                    :params [
                        parameter
                            :specs specifiers
                            :decl declarator
                                :name (argc)
                        parameter
                            :specs specifiers
                            :decl declarator
                                :name (argv)
                    ]
                :name (main)
            :old_decls [
                declaration
                    :specs specifiers
                        :dirtype id-type
                            :names [(char)]
                    :decls [
                        declarator
                            :indtype pointer
                                :specs specifiers
                                :indtype pointer
                                    :specs specifiers
                            :name (argv)
                    ]
                declaration
                    :specs specifiers
                        :dirtype id-type
                            :names [(int)]
                    :decls [
                        declarator
                            :name (argc)
                    ]
                declaration
                    :specs specifiers
                        :dirtype id-type
                            :names [(int)]
            ]
            :body block
                :entities []
    ]
~~~~~~~~~~~~~~~~


[expressions]

primary expression*
==================
{
    x;
    1;
    "A";
    'a';
    (1);
}
~~~~~~~~~~~~~~~~~~
block
    :entities [
        identifier
            :value (x)
        constant
            :value (1)
        constant
            :value ("A")
        constant
            :value ('a')
        constant
            :value (1)
    ]
~~~~~~~~~~~~~~~~~~

postfix expression*
==================
{
    x;
    x[1];
    x(1);
    x(1, 2);
    x();
    x.a;
    x->a;
    x++;
    x--;
    (int){1};
    (int){1,};
}
~~~~~~~~~~~~~~~~~~
block
    :entities [
        identifier
            :value (x)
        subscript
            :left identifier
                :value (x)
            :index constant
                :value (1)
        call
            :left identifier
                :value (x)
            :args [
                constant
                    :value (1)
            ]
        call
            :left identifier
                :value (x)
            :args [
                constant
                    :value (1)
                constant
                    :value (2)
            ]
        call
            :left identifier
                :value (x)
            :args []
        accessor
            :left identifier
                :value (x)
            :op (.)
            :field (a)
        accessor
            :left identifier
                :value (x)
            :op (->)
            :field (a)
        unary
            :op (++)
            :expr identifier
                :value (x)
        unary
            :op (--)
            :expr identifier
                :value (x)
        comp-literal
            :type_name type-name
                :specs specifiers
                    :dirtype id-type
                        :names [(int)]
            :members [
                comp-member
                    :init constant
                        :value (1)
            ]
        comp-literal
            :type_name type-name
                :specs specifiers
                    :dirtype id-type
                        :names [(int)]
            :members [
                comp-member
                    :init constant
                        :value (1)
            ]
    ]
~~~~~~~~~~~~~~~~~~

unary expression*
================
{
    x;
    ++x; --x;
    &x; *x;
    +x; -x;
    ~x; !x;
}
~~~~~~~~~~~~~~~~
block
    :entities [
        identifier
            :value (x)
        unary
            :op (++)
            :expr identifier
                :value (x)
        unary
            :op (--)
            :expr identifier
                :value (x)
        unary
            :op (&)
            :expr identifier
                :value (x)
        unary
            :op (*)
            :expr identifier
                :value (x)
        unary
            :op (+)
            :expr identifier
                :value (x)
        unary
            :op (-)
            :expr identifier
                :value (x)
        unary
            :op (~)
            :expr identifier
                :value (x)
        unary
            :op (!)
            :expr identifier
                :value (x)
    ]
~~~~~~~~~~~~~~~~

binary expression*
=================
{
    x + x; x << x; x <= x; x == x; x ^ x; x || x;
    (x + 2) * (z * 2) + (y || p);
}
~~~~~~~~~~~~~~~~~
block
    :entities [
        binary
            :left identifier
                :value (x)
            :op (+)
            :right identifier
                :value (x)
        binary
            :left identifier
                :value (x)
            :op (<<)
            :right identifier
                :value (x)
        binary
            :left identifier
                :value (x)
            :op (<=)
            :right identifier
                :value (x)
        binary
            :left identifier
                :value (x)
            :op (==)
            :right identifier
                :value (x)
        binary
            :left identifier
                :value (x)
            :op (^)
            :right identifier
                :value (x)
        binary
            :left identifier
                :value (x)
            :op (||)
            :right identifier
                :value (x)
        binary
            :left binary
                :left binary
                    :left identifier
                        :value (x)
                    :op (+)
                    :right constant
                        :value (2)
                :op (*)
                :right binary
                    :left identifier
                        :value (z)
                    :op (*)
                    :right constant
                        :value (2)
            :op (+)
            :right binary
                :left identifier
                    :value (y)
                :op (||)
                :right identifier
                    :value (p)
    ]
~~~~~~~~~~~~~~~~~

conditional expression*
======================
    x + 5 ? x * (a + b) : 2 * 3;
~~~~~~~~~~~~~~~~~~~~~~
conditional
    :cond binary
        :left identifier
            :value (x)
        :op (+)
        :right constant
            :value (5)
    :then_br binary
        :left identifier
            :value (x)
        :op (*)
        :right binary
            :left identifier
                :value (a)
            :op (+)
            :right identifier
                :value (b)
    :else_br binary
        :left constant
            :value (2)
        :op (*)
        :right constant
            :value (3)
~~~~~~~~~~~~~~~~~~~~~~

assignment expression*
=====================
{
    x = a * b;
    x *= a * b;
    x |= x;
}
~~~~~~~~~~~~~~~~~~~~~
block
    :entities [
        assignment
            :left identifier
                :value (x)
            :op (=)
            :right binary
                :left identifier
                    :value (a)
                :op (*)
                :right identifier
                    :value (b)
        assignment
            :left identifier
                :value (x)
            :op (*=)
            :right binary
                :left identifier
                    :value (a)
                :op (*)
                :right identifier
                    :value (b)
        assignment
            :left identifier
                :value (x)
            :op (|=)
            :right identifier
                :value (x)
    ]
~~~~~~~~~~~~~~~~~~~~~


[statements]

common*
======
{
    a: ;
    {}
    ;
    if (0);
    while (0);
    return;
}
~~~~~~
block
    :entities [
        label
            :name (a)
            :stmt empty
        block
            :entities []
        empty
        if
            :cond constant
                :value (0)
            :then_br empty
        while
            :cond constant
                :value (0)
            :body empty
        return
    ]
~~~~~~

labeled statement*
=================
{
    a: I: case 1: default: ;
    if (0)
        b: I: case 2: default: ;
    switch (0)
    c: I: case 3: default: {
        d: I: case 4: default: ;
    }
}
~~~~~~~~~~~~~~~~~
block
    :entities [
        label
            :name (a)
            :stmt label
                :name (I)
                :stmt case
                    :expr constant
                        :value (1)
                    :stmt default
                        :stmt empty
        if
            :cond constant
                :value (0)
            :then_br label
                :name (b)
                :stmt label
                    :name (I)
                    :stmt case
                        :expr constant
                            :value (2)
                        :stmt default
                            :stmt empty
        switch
            :cond constant
                :value (0)
            :body label
                :name (c)
                :stmt label
                    :name (I)
                    :stmt case
                        :expr constant
                            :value (3)
                        :stmt default
                            :stmt block
                                :entities [
                                    label
                                        :name (d)
                                        :stmt label
                                            :name (I)
                                            :stmt case
                                                :expr constant
                                                    :value (4)
                                                :stmt default
                                                    :stmt empty
                                ]
    ]
~~~~~~~~~~~~~~~~~

compound statement*
==================
{
    { }
    {;}
    {;;}
}
~~~~~~~~~~~~~~~~~~
block
    :entities [
        block
            :entities []
        block
            :entities [
                empty
            ]
        block
            :entities [
                empty
                empty
            ]
    ]
~~~~~~~~~~~~~~~~~~

expression statement*
====================
    1;
~~~~~~~~~~~~~~~~~~~~
constant
    :value (1)
~~~~~~~~~~~~~~~~~~~~

if statement*
===================
{
    if (1) ;
    if (1) ; else ;
    if (1) ; else if (2) ; else ;
    if (1) if (2) ; else ;
    if (1) if (2) ; else ; else ;
}
~~~~~~~~~~~~~~~~~~~
block
    :entities [
        if
            :cond constant
                :value (1)
            :then_br empty
        if
            :cond constant
                :value (1)
            :then_br empty
            :else_br empty
        if
            :cond constant
                :value (1)
            :then_br empty
            :else_br if
                :cond constant
                    :value (2)
                :then_br empty
                :else_br empty
        if
            :cond constant
                :value (1)
            :then_br if
                :cond constant
                    :value (2)
                :then_br empty
                :else_br empty
        if
            :cond constant
                :value (1)
            :then_br if
                :cond constant
                    :value (2)
                :then_br empty
                :else_br empty
            :else_br empty
    ]
~~~~~~~~~~~~~~~~~~~

switch statement*
================
{
    switch (1)
    case 1:
    x:
    default: ;
    switch (1)
    case 1:
    y:
    default:
        if (0) ; else ;
    switch (1) {
        case 1:
        case 2: ;
        z:
        default: ;
    }
}
~~~~~~~~~~~~~~~~
block
    :entities [
        switch
            :cond constant
                :value (1)
            :body case
                :expr constant
                    :value (1)
                :stmt label
                    :name (x)
                    :stmt default
                        :stmt empty
        switch
            :cond constant
                :value (1)
            :body case
                :expr constant
                    :value (1)
                :stmt label
                    :name (y)
                    :stmt default
                        :stmt if
                            :cond constant
                                :value (0)
                            :then_br empty
                            :else_br empty
        switch
            :cond constant
                :value (1)
            :body block
                :entities [
                    case
                        :expr constant
                            :value (1)
                        :stmt case
                            :expr constant
                                :value (2)
                            :stmt empty
                    label
                        :name (z)
                        :stmt default
                            :stmt empty
                ]
    ]
~~~~~~~~~~~~~~~~

while statement*
===============
{
    while (0);
    do ; while (0);
}
~~~~~~~~~~~~~~~
block
    :entities [
        while
            :cond constant
                :value (0)
            :body empty
        do-while
            :body constant
                :value (0)
            :cond empty
    ]
~~~~~~~~~~~~~~~


for statement*
=============
{
    for (i = 0; i < 10; ++i);
    for (i = 0; i < 10;);
    for (i = 0;; ++i);
    for (i = 0;;);
    for (; i < 10; ++i);
    for (; i < 10;);
    for (;; ++i);
    for (;;);
    for (int i = 0, j = 1; i < 10, j < 10; ++i, ++j);
    for (int i = 0, j = 1; i < 10, j < 10;);
    for (int i = 0, j = 1;; ++i, ++j);
    for (int i = 0, j = 1;;);
}
~~~~~~~~~~~~~
block
    :entities [
        for
            :init assignment
                :left identifier
                    :value (i)
                :op (=)
                :right constant
                    :value (0)
            :cond binary
                :left identifier
                    :value (i)
                :op (<)
                :right constant
                    :value (10)
            :next unary
                :op (++)
                :expr identifier
                    :value (i)
            :body empty
        for
            :init assignment
                :left identifier
                    :value (i)
                :op (=)
                :right constant
                    :value (0)
            :cond binary
                :left identifier
                    :value (i)
                :op (<)
                :right constant
                    :value (10)
            :body empty
        for
            :init assignment
                :left identifier
                    :value (i)
                :op (=)
                :right constant
                    :value (0)
            :next unary
                :op (++)
                :expr identifier
                    :value (i)
            :body empty
        for
            :init assignment
                :left identifier
                    :value (i)
                :op (=)
                :right constant
                    :value (0)
            :body empty
        for
            :cond binary
                :left identifier
                    :value (i)
                :op (<)
                :right constant
                    :value (10)
            :next unary
                :op (++)
                :expr identifier
                    :value (i)
            :body empty
        for
            :cond binary
                :left identifier
                    :value (i)
                :op (<)
                :right constant
                    :value (10)
            :body empty
        for
            :next unary
                :op (++)
                :expr identifier
                    :value (i)
            :body empty
        for
            :body empty
        for
            :init declaration
                :specs specifiers
                    :dirtype id-type
                        :names [(int)]
                :decls [
                    declarator
                        :name (i)
                        :init constant
                            :value (0)
                    declarator
                        :name (j)
                        :init constant
                            :value (1)
                ]
            :cond comma
                :exprs [
                    binary
                        :left identifier
                            :value (i)
                        :op (<)
                        :right constant
                            :value (10)
                    binary
                        :left identifier
                            :value (j)
                        :op (<)
                        :right constant
                            :value (10)
                ]
            :next comma
                :exprs [
                    unary
                        :op (++)
                        :expr identifier
                            :value (i)
                    unary
                        :op (++)
                        :expr identifier
                            :value (j)
                ]
            :body empty
        for
            :init declaration
                :specs specifiers
                    :dirtype id-type
                        :names [(int)]
                :decls [
                    declarator
                        :name (i)
                        :init constant
                            :value (0)
                    declarator
                        :name (j)
                        :init constant
                            :value (1)
                ]
            :cond comma
                :exprs [
                    binary
                        :left identifier
                            :value (i)
                        :op (<)
                        :right constant
                            :value (10)
                    binary
                        :left identifier
                            :value (j)
                        :op (<)
                        :right constant
                            :value (10)
                ]
            :body empty
        for
            :init declaration
                :specs specifiers
                    :dirtype id-type
                        :names [(int)]
                :decls [
                    declarator
                        :name (i)
                        :init constant
                            :value (0)
                    declarator
                        :name (j)
                        :init constant
                            :value (1)
                ]
            :next comma
                :exprs [
                    unary
                        :op (++)
                        :expr identifier
                            :value (i)
                    unary
                        :op (++)
                        :expr identifier
                            :value (j)
                ]
            :body empty
        for
            :init declaration
                :specs specifiers
                    :dirtype id-type
                        :names [(int)]
                :decls [
                    declarator
                        :name (i)
                        :init constant
                            :value (0)
                    declarator
                        :name (j)
                        :init constant
                            :value (1)
                ]
            :body empty
    ]
~~~~~~~~~~~~~

jump statement*
==============
{
    goto x;
    continue;
    break;
    return 0;
    return;
}
~~~~~~~~~~~~~~
block
    :entities [
        goto
            :label (x)
        continue
        break
        return
            :result constant
                :value (0)
        return
    ]
~~~~~~~~~~~~~~


[declarations]

declaration_specifiers
======================
    typedef int x;
    int typedef y;
    const int const i;
    inline int inline i();
~~~~~~~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :storage (typedef)
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (x)
            ]
        declaration
            :specs specifiers
                :storage (typedef)
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (y)
            ]
        declaration
            :specs specifiers
                :quals [(const)(const)]
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (i)
            ]
        declaration
            :specs specifiers
                :fnspec (inline)
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :indtype function
                        :params []
                    :name (i)
            ]
    ]
~~~~~~~~~~~~~~~~~~~~~~

init declarator
===============
    int i = 0;
~~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (i)
                    :init constant
                        :value (0)
            ]
    ]
~~~~~~~~~~~~~~~

storage class
=============
    typedef int x;
    extern int i;
    static int f() {
        auto int i;
        register int j;
    }
~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :storage (typedef)
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (x)
            ]
        declaration
            :specs specifiers
                :storage (extern)
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (i)
            ]
        function-def
            :specs specifiers
                :storage (static)
                :dirtype id-type
                    :names [(int)]
            :decl declarator
                :indtype function
                    :params []
                :name (f)
            :body block
                :entities [
                    declaration
                        :specs specifiers
                            :storage (auto)
                            :dirtype id-type
                                :names [(int)]
                        :decls [
                            declarator
                                :name (i)
                        ]
                    declaration
                        :specs specifiers
                            :storage (register)
                            :dirtype id-type
                                :names [(int)]
                        :decls [
                            declarator
                                :name (j)
                        ]
                ]
    ]
~~~~~~~~~~~~~

type specifier
==============
    void;
    char;
    char signed;
    unsigned char;
    short;
    int short;
    int short signed;
    unsigned int short;
    long;
    int long signed;
    unsigned long long int;
    float;
    double;
    double long;
    _Bool;
    _Complex float;
    double _Complex;
    struct s;
    enum e;
~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(char)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(char)(signed)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(unsigned)(char)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(short)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)(short)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)(short)(signed)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(unsigned)(int)(short)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(long)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)(long)(signed)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(unsigned)(long)(long)(int)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(float)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(double)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(double)(long)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(_Bool)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(_Complex)(float)]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(double)(_Complex)]
        declaration
            :specs specifiers
                :dirtype struct
                    :name (s)
        declaration
            :specs specifiers
                :dirtype enum
                    :name (e)
    ]
~~~~~~~~~~~~~~

struct and union
================
    struct s {int i; long *j;};
    union {int i;};
    struct s;
    typedef int i;
    typedef union u u_t;
~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype struct
                    :name (s)
                    :members [
                        declaration
                            :specs specifiers
                                :dirtype id-type
                                    :names [(int)]
                            :decls [
                                declarator
                                    :name (i)
                            ]
                        declaration
                            :specs specifiers
                                :dirtype id-type
                                    :names [(long)]
                            :decls [
                                declarator
                                    :indtype pointer
                                        :specs specifiers
                                    :name (j)
                            ]
                    ]
        declaration
            :specs specifiers
                :dirtype union
                    :members [
                        declaration
                            :specs specifiers
                                :dirtype id-type
                                    :names [(int)]
                            :decls [
                                declarator
                                    :name (i)
                            ]
                    ]
        declaration
            :specs specifiers
                :dirtype struct
                    :name (s)
        declaration
            :specs specifiers
                :storage (typedef)
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (i)
            ]
        declaration
            :specs specifiers
                :storage (typedef)
                :dirtype union
                    :name (u)
            :decls [
                declarator
                    :name (u_t)
            ]
    ]
~~~~~~~~~~~~~~~~

enum specifier
==============
    enum e { i, j = 20 };
    enum { i, };
~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype enum
                    :name (e)
                    :values [
                        enumerator
                            :name (i)
                        enumerator
                            :name (j)
                            :value constant
                                :value (20)
                    ]
        declaration
            :specs specifiers
                :dirtype enum
                    :values [
                        enumerator
                            :name (i)
                    ]
    ]
~~~~~~~~~~~~~~

type qualifier
==============
    const int;
    restrict int;
    volatile int;
~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :quals [(const)]
                :dirtype id-type
                    :names [(int)]
        declaration
            :specs specifiers
                :quals [(restrict)]
                :dirtype id-type
                    :names [(int)]
        declaration
            :specs specifiers
                :quals [(volatile)]
                :dirtype id-type
                    :names [(int)]
    ]
~~~~~~~~~~~~~~

function specifier
==================
    inline int f();
~~~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :fnspec (inline)
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :indtype function
                        :params []
                    :name (f)
            ]
    ]
~~~~~~~~~~~~~~~~~~

declarator
==========
    int *p;
    int *const restrict volatile p;
    int i, *volatile restrict const *p[static 10];
    int *i, *const (*restrict (*volatile p)[])();
~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :indtype pointer
                        :specs specifiers
                    :name (p)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :indtype pointer
                        :specs specifiers
                            :quals [(const)(restrict)(volatile)]
                    :name (p)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (i)
                declarator
                    :indtype pointer
                        :specs specifiers
                            :quals [(volatile)(restrict)(const)]
                        :indtype pointer
                            :specs specifiers
                            :indtype array
                                :dim_specs specifiers
                                    :storage (static)
                                :dim constant
                                    :value (10)
                    :name (p)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :indtype pointer
                        :specs specifiers
                    :name (i)
                declarator
                    :indtype pointer
                        :specs specifiers
                            :quals [(const)]
                        :indtype function
                            :indtype pointer
                                :specs specifiers
                                    :quals [(restrict)]
                                :indtype array
                                    :indtype pointer
                                        :specs specifiers
                                            :quals [(volatile)]
                                    :dim_specs specifiers
                            :params []
                    :name (p)
            ]
    ]
~~~~~~~~~~

parameter type list
===================
    void f(int i) {}
    void f(int i, ...) {}
    void f(s_t i) {}
    void f(s_t i, ...) {}
~~~~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        function-def
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decl declarator
                :indtype function
                    :params [
                        parameter
                            :specs specifiers
                                :dirtype id-type
                                    :names [(int)]
                            :decl declarator
                                :name (i)
                    ]
                :name (f)
            :body block
                :entities []
        function-def
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decl declarator
                :indtype function
                    :params [
                        parameter
                            :specs specifiers
                                :dirtype id-type
                                    :names [(int)]
                            :decl declarator
                                :name (i)
                        special
                            :value (...)
                    ]
                :name (f)
            :body block
                :entities []
        function-def
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decl declarator
                :indtype function
                    :params [
                        parameter
                            :specs specifiers
                                :dirtype id-type
                                    :names [(s_t)]
                            :decl declarator
                                :name (i)
                    ]
                :name (f)
            :body block
                :entities []
        function-def
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decl declarator
                :indtype function
                    :params [
                        parameter
                            :specs specifiers
                                :dirtype id-type
                                    :names [(s_t)]
                            :decl declarator
                                :name (i)
                        special
                            :value (...)
                    ]
                :name (f)
            :body block
                :entities []
    ]
~~~~~~~~~~~~~~~~~~~

parameter declaration
=====================
    void f(int i);
    void f(int *);
    void f(int);
    void f(s_t i);
~~~~~~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decls [
                declarator
                    :indtype function
                        :params [
                            parameter
                                :specs specifiers
                                    :dirtype id-type
                                        :names [(int)]
                                :decl declarator
                                    :name (i)
                        ]
                    :name (f)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decls [
                declarator
                    :indtype function
                        :params [
                            parameter
                                :specs specifiers
                                    :dirtype id-type
                                        :names [(int)]
                                :decl declarator
                                    :indtype pointer
                                        :specs specifiers
                        ]
                    :name (f)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decls [
                declarator
                    :indtype function
                        :params [
                            parameter
                                :specs specifiers
                                    :dirtype id-type
                                        :names [(int)]
                        ]
                    :name (f)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decls [
                declarator
                    :indtype function
                        :params [
                            parameter
                                :specs specifiers
                                    :dirtype id-type
                                        :names [(s_t)]
                                :decl declarator
                                    :name (i)
                        ]
                    :name (f)
            ]
    ]
~~~~~~~~~~~~~~~~~~~~~

identifier list
===============
    void f(i);
    void f(i, j);
~~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decls [
                declarator
                    :indtype function
                        :params [
                            parameter
                                :specs specifiers
                                :decl declarator
                                    :name (i)
                        ]
                    :name (f)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decls [
                declarator
                    :indtype function
                        :params [
                            parameter
                                :specs specifiers
                                :decl declarator
                                    :name (i)
                            parameter
                                :specs specifiers
                                :decl declarator
                                    :name (j)
                        ]
                    :name (f)
            ]
    ]
~~~~~~~~~~~~~~~

abstract declarator
===================
    void f(int *[]);
    void f(int []);
~~~~~~~~~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decls [
                declarator
                    :indtype function
                        :params [
                            parameter
                                :specs specifiers
                                    :dirtype id-type
                                        :names [(int)]
                                :decl declarator
                                    :indtype pointer
                                        :specs specifiers
                                        :indtype array
                                            :dim_specs specifiers
                        ]
                    :name (f)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(void)]
            :decls [
                declarator
                    :indtype function
                        :params [
                            parameter
                                :specs specifiers
                                    :dirtype id-type
                                        :names [(int)]
                                :decl declarator
                                    :indtype array
                                        :dim_specs specifiers
                        ]
                    :name (f)
            ]
    ]
~~~~~~~~~~~~~~~~~~~

initializer
===========
    int x = 1;
    int x = {1};
    int x = {1,};
    int x = {1, .x = 1};
    int x = {1, [2][3].p = 2};
~~~~~~~~~~~
transl-unit
    :entities [
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (x)
                    :init constant
                        :value (1)
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (x)
                    :init comp-literal
                        :members [
                            comp-member
                                :init constant
                                    :value (1)
                        ]
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (x)
                    :init comp-literal
                        :members [
                            comp-member
                                :init constant
                                    :value (1)
                        ]
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (x)
                    :init comp-literal
                        :members [
                            comp-member
                                :init constant
                                    :value (1)
                            comp-member
                                :designs [
                                    identifier
                                        :value (x)
                                ]
                                :init constant
                                    :value (1)
                        ]
            ]
        declaration
            :specs specifiers
                :dirtype id-type
                    :names [(int)]
            :decls [
                declarator
                    :name (x)
                    :init comp-literal
                        :members [
                            comp-member
                                :init constant
                                    :value (1)
                            comp-member
                                :designs [
                                    constant
                                        :value (2)
                                    constant
                                        :value (3)
                                    identifier
                                        :value (p)
                                ]
                                :init constant
                                    :value (2)
                        ]
            ]
    ]
~~~~~~~~~~~
