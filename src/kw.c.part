/* C code produced by gperf version 3.0.4 */
/* Command-line: gperf -tlTCE -j1 -K word -H kw_hash -N kw_check src/kw.gperf  */
/* Computed positions: -k'1,3' */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
#endif

/* maximum key range = 39, duplicates = 0 */

#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
static unsigned int
kw_hash (str, len)
     register const char *str;
     register unsigned int len;
{
  static const unsigned char asso_values[] =
    {
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42,  4, 42, 15, 22,  6,
      24, 11,  2,  6, 42,  1, 42, 42, 11, 23,
       9, 22, 28, 42,  0,  1,  0,  6, 22, 26,
      42, 42, 23, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
      42, 42, 42, 42, 42, 42
    };
  register int hval = len;

  switch (hval)
    {
      default:
        hval += asso_values[(unsigned char)str[2]];
      /*FALLTHROUGH*/
      case 2:
      case 1:
        hval += asso_values[(unsigned char)str[0]];
        break;
    }
  return hval;
}

#ifdef __GNUC__
__inline
#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
__attribute__ ((__gnu_inline__))
#endif
#endif
const struct gperf_s *
kw_check (str, len)
     register const char *str;
     register unsigned int len;
{
  enum
    {
      TOTAL_KEYWORDS = 37,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 10,
      MIN_HASH_VALUE = 3,
      MAX_HASH_VALUE = 41
    };

  static const unsigned char lengthtable[] =
    {
       0,  0,  0,  2,  3,  3,  6,  6,  6,  8,  4,  4,  5,  6,
       8,  8,  4,  6,  6,  4,  5,  4,  6,  8,  4,  4,  2,  4,
       5,  5,  6,  5,  5,  7,  8,  7,  6, 10,  5,  0,  0,  8
    };
  static const struct gperf_s wordlist[] =
    {
      {""}, {""}, {""},
#line 18 "src/kw.gperf"
      {"if", KW_IF},
#line 20 "src/kw.gperf"
      {"int", KW_INT},
#line 16 "src/kw.gperf"
      {"for", KW_FOR},
#line 24 "src/kw.gperf"
      {"return", KW_RETURN},
#line 29 "src/kw.gperf"
      {"struct", KW_STRUCT},
#line 30 "src/kw.gperf"
      {"switch", KW_SWITCH},
#line 23 "src/kw.gperf"
      {"restrict", KW_RESTRICT},
#line 17 "src/kw.gperf"
      {"goto", KW_GOTO},
#line 5 "src/kw.gperf"
      {"case", KW_CASE},
#line 32 "src/kw.gperf"
      {"union", KW_UNION},
#line 26 "src/kw.gperf"
      {"signed", KW_SIGNED},
#line 22 "src/kw.gperf"
      {"register", KW_REGISTER},
#line 33 "src/kw.gperf"
      {"unsigned", KW_UNSIGNED},
#line 12 "src/kw.gperf"
      {"else", KW_ELSE},
#line 14 "src/kw.gperf"
      {"extern", KW_EXTERN},
#line 19 "src/kw.gperf"
      {"inline", KW_INLINE},
#line 3 "src/kw.gperf"
      {"auto", KW_AUTO},
#line 7 "src/kw.gperf"
      {"const", KW_CONST},
#line 13 "src/kw.gperf"
      {"enum", KW_ENUM},
#line 28 "src/kw.gperf"
      {"static", KW_STATIC},
#line 8 "src/kw.gperf"
      {"continue", KW_CONTINUE},
#line 21 "src/kw.gperf"
      {"long", KW_LONG},
#line 6 "src/kw.gperf"
      {"char", KW_CHAR},
#line 10 "src/kw.gperf"
      {"do", KW_DO},
#line 34 "src/kw.gperf"
      {"void", KW_VOID},
#line 25 "src/kw.gperf"
      {"short", KW_SHORT},
#line 15 "src/kw.gperf"
      {"float", KW_FLOAT},
#line 27 "src/kw.gperf"
      {"sizeof", KW_SIZEOF},
#line 37 "src/kw.gperf"
      {"_Bool", KW_BOOL},
#line 36 "src/kw.gperf"
      {"while", KW_WHILE},
#line 9 "src/kw.gperf"
      {"default", KW_DEFAULT},
#line 38 "src/kw.gperf"
      {"_Complex", KW_COMPLEX},
#line 31 "src/kw.gperf"
      {"typedef", KW_TYPEDEF},
#line 11 "src/kw.gperf"
      {"double", KW_DOUBLE},
#line 39 "src/kw.gperf"
      {"_Imaginary", KW_IMAGINARY},
#line 4 "src/kw.gperf"
      {"break", KW_BREAK},
      {""}, {""},
#line 35 "src/kw.gperf"
      {"volatile", KW_VOLATILE}
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = kw_hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        if (len == lengthtable[key])
          {
            register const char *s = wordlist[key].word;

            if (*str == *s && !memcmp (str + 1, s + 1, len - 1))
              return &wordlist[key];
          }
    }
  return 0;
}
